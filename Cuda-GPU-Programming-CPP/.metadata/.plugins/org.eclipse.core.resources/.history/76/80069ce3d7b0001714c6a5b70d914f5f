/* Simple CPU executable code for Vector Addition
 * CPU-ONLY-CODE
 * Author : Janvijay Singh
 */

#include<bits/stdc++.h>
#define SIZE 1024

using namespace std;

// Method to perform Vector Addition
__global__ void VectorAdd(int *a, int *b, int *c, int n)
{
	int i = threadIdx.x;

	// To check if current thread Id is less than number of elements in array
	// To overcome any issues which might occur if number of threads launched turn
	// out to be grater than number of elements in array
	if(i<n)
		c[i] = a[i] + b[i];
}

// 3 Steps :
// Step 1. Parallelize our vector addition Function
// Step 2. Allocate memory onto GPU and move our data over to GPU's memory space
// Step 3. Modify our vector add function call
int main()
{
	int *a, *b, *c;

	// Memory Allocation
	a = (int *)malloc(SIZE * sizeof(int));
	b = (int *)malloc(SIZE * sizeof(int));
	c = (int *)malloc(SIZE * sizeof(int));

	// Initialization
	for(int i=0;i<SIZE;i++)
	{
		a[i] = i;
		b[i] = i;
		c[i] = 0;
	}

	// Calling Vector Addition Function
	VectorAdd(a, b, c, SIZE);

	// Printing out first 10 elements of output vector
	for(int i=0;i<10; ++i)
		printf("c[%d] = %d\n", i, c[i]);

	// Freeing memory
	free(a);
	free(b);
	free(c);

	return 0;
}
